UCI Wine Dataset Analysis
========================================================
author: Jaume Ferrarons
date: February 4th, 2016

Introduction
========================================================

We provide a basic visor of the Wine Data Set from the UCI Machine Learning Reposity. It features 3 classical algorithms:

- K-means
- Linear Discriminant Analysis
- Hierarchical clustering


K-means
========================================================

The figure below shows us that K-means is not able to discriminate the different kinds of wine properly:
```{r, echo=FALSE}
library(shiny)
library(rpart)
library(cluster)
library(MASS)

#Load Data
data <- read.csv("./data/wine.csv")
data$Class <- as.factor(data$Class)
#Fit the kmeans model:
fit <- kmeans(as.matrix(data[,-1]), 3)
#Plot the result
clusplot(data, fit$cluster, color=TRUE, shade=F, labels=1, lines=0)
table(data.frame(cbind(data$Class,fit$cluster)))
```


Hierarchical clustering
========================================================

Hierarchical clustering performs better than K-means. The confussion matrix obtained when cutting the dendrogram in three different grups is the following:
```{r, echo=FALSE}
#Compute the distance matrix from the dataset
d <- dist(data[,-1], method = "euclidean")
#Perform the hierarchical clustering
fit <- hclust(d, method="ward")
#Cut the tree in three different groups
groups <- cutree(fit, k=3)
conf <- table(data.frame(cbind(data$Class,groups)))
conf
```
And it has an accuracy of:
```{r, echo=FALSE}
paste0(sum(diag(conf))/sum(conf)*100, "%")
```

Linear Discriminant Analysis
========================================================

It is the algorithm that has the highest performance. It projects the points into a space such that the classes become clearly separable and it has an accuracy of:
```{r, echo=FALSE}
clf <- lda(Class~.,data)
conf <- table(data.frame(cbind(data$Class,predict(clf, data[,-1])$class)))
paste0(sum(diag(conf))/sum(conf)*100, "%")
```
***
```{r, echo=FALSE}

plot(clf, main="Linear Discriminant Analysis", xlab="First principal axis", ylab="Second principal axis", col=as.numeric(data$Class))
```
***